from flask import Flask, request, jsonify
import requests
import os
from dotenv import load_dotenv
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart

load_dotenv()

app = Flask(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–Ω–µ—à–Ω–µ–≥–æ API
EXTERNAL_API_URL = "https://otapi-1688.p.rapidapi.com/BatchSearchItemsFrame"

# –ü–æ–ª—É—á–∞–µ–º API-–∫–ª—é—á –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è, —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
RAPIDAPI_KEY = os.getenv("RAPIDAPI_KEY")

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è email
EMAIL_HOST = os.getenv("EMAIL_HOST", "smtp.gmail.com")
EMAIL_PORT = int(os.getenv("EMAIL_PORT", 587))
EMAIL_USER = os.getenv("EMAIL_USER")
EMAIL_PASSWORD = os.getenv("EMAIL_PASSWORD")
EMAIL_FROM_NAME = os.getenv("EMAIL_FROM_NAME", "API Notification")
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")

API_HEADERS = {
    "x-rapidapi-key": RAPIDAPI_KEY,
    "x-rapidapi-host": "otapi-1688.p.rapidapi.com"
}

@app.route('/api/search', methods=['GET'])
def search_items():
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ —Å –ø–æ—è—Å–Ω–µ–Ω–∏—è–º–∏
        params = {
            "language": request.args.get('language', 'en'),          # –Ø–∑—ã–∫ –æ—Ç–≤–µ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'en' –¥–ª—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ, 'cn' –¥–ª—è –∫–∏—Ç–∞–π—Å–∫–æ–≥–æ)
            "framePosition": request.args.get('framePosition', '0'), # –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –≤ —Å–ø–∏—Å–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0)
            "frameSize": request.args.get('frameSize', '50'),       # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–º–∞–∫—Å–∏–º—É–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 50)
            "CategoryId": request.args.get('CategoryId'),           # ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'abb-201034004')
            "ItemTitle": request.args.get('ItemTitle'),             # –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Ç–æ–≤–∞—Ä–∞ (—Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏)
            "OrderBy": request.args.get('OrderBy', 'Popularity:Desc'), # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'Popularity:Desc' - –ø–æ —É–±—ã–≤–∞–Ω–∏—é –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏, 'Price:Asc' - –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é —Ü–µ–Ω—ã)
            "MinPrice": request.args.get('MinPrice'),               # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –≤ —é–∞–Ω—è—Ö (CNY) –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            "MaxPrice": request.args.get('MaxPrice'),               # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –≤ —é–∞–Ω—è—Ö (CNY) –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            "MinVolume": request.args.get('MinVolume'),             # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü) –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            "ImageUrl": request.args.get('ImageUrl')                # URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ—Ö–æ–∂–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è API)
        }

        # –£–¥–∞–ª—è–µ–º None –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, —á—Ç–æ–±—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø—É—Å—Ç—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
        query_params = {k: v for k, v in params.items() if v is not None}

        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –≤–Ω–µ—à–Ω–µ–º—É API
        response = requests.get(
            EXTERNAL_API_URL,
            headers=API_HEADERS,
            params=query_params
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞
        response.raise_for_status()

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º JSON –æ—Ç–≤–µ—Ç –æ—Ç RapidAPI
        return jsonify(response.json())

    except requests.exceptions.RequestException as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤–Ω–µ—à–Ω–µ–≥–æ API (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á)
        return jsonify({
            'error': 'Failed to fetch data from external API',
            'message': str(e)
        }), 500

    except Exception as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –æ—à–∏–±–æ–∫ —Å–µ—Ä–≤–µ—Ä–∞
        return jsonify({
            'error': 'Internal server error',
            'message': str(e)
        }), 500


@app.route('/api/send-email', methods=['POST'])
def send_email_notification():
    try:
        data = request.get_json()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        required_fields = ['email', 'fio', 'message']
        missing_fields = [field for field in required_fields if field not in data or not data[field]]
        
        if missing_fields:
            return jsonify({
                'error': 'Missing required fields',
                'missing_fields': missing_fields
            }), 400
        
        sender_email = data['email']  # email –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è (–¥–ª—è —Å–≤—è–∑–∏)
        fio = data['fio']
        message_text = data['message']
        subject = data.get('subject', f'–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {fio}')
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∏—Å—å–º–∞ (–±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ù–ê–ú)
        email_content = f"""
        –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ä–º—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏!
        
        –û—Ç: {fio}
        Email –¥–ª—è —Å–≤—è–∑–∏: {sender_email}
        
        –°–æ–æ–±—â–µ–Ω–∏–µ:
        {message_text}
        
        ---
        –≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç —Å–∏—Å—Ç–µ–º—ã.
        """
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email –ù–ê–ú (–Ω–∞ EMAIL_USER)
        send_email(EMAIL_USER, subject, email_content)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
        telegram_sent = False
        telegram_error = None
        
        if TELEGRAM_BOT_TOKEN and TELEGRAM_CHAT_ID:
            try:
                send_telegram_message(f"üìß –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ä–º—ã:\n\nüë§ –û—Ç: {fio}\nüìß Email: {sender_email}\n\nüí¨ –°–æ–æ–±—â–µ–Ω–∏–µ:\n{message_text}")
                telegram_sent = True
            except Exception as e:
                telegram_error = str(e)

        return jsonify({
            'success': True,
            'message': 'Email —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω',
            'telegram_sent': telegram_sent,
            'telegram_error': telegram_error,
            'recipient': EMAIL_USER,  # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏
            'sender': {
                'fio': fio,
                'email': sender_email
            }
        })
        
    except Exception as e:
        return jsonify({
            'error': 'Failed to send email',
            'message': str(e)
        }), 500

def send_email(to_email, subject, message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ email —á–µ—Ä–µ–∑ SMTP"""
    if not all([EMAIL_USER, EMAIL_PASSWORD]):
        raise Exception("Email credentials not configured")

    msg = MIMEMultipart()
    msg['From'] = f'{EMAIL_FROM_NAME} <{EMAIL_USER}>'
    msg['To'] = to_email
    msg['Subject'] = subject

    msg.attach(MIMEText(message, 'plain', 'utf-8'))

    try:
        with smtplib.SMTP(EMAIL_HOST, EMAIL_PORT) as server:
            server.starttls()
            server.login(EMAIL_USER, EMAIL_PASSWORD)
            server.sendmail(EMAIL_USER, to_email, msg.as_string())
    except Exception as e:
        raise Exception(f"SMTP error: {str(e)}")

def send_telegram_message(message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
    if not all([TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID]):
        raise Exception("Telegram credentials not configured")
    
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {
        'chat_id': TELEGRAM_CHAT_ID,
        'text': message,
        'parse_mode': 'HTML'
    }
    
    response = requests.post(url, json=payload)
    response.raise_for_status()
    
    return response.json()

if __name__ == '__main__':
    # –ü–æ–ª—É—á–∞–µ–º IP-–∞–¥—Ä–µ—Å –∏ –ø–æ—Ä—Ç –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è, —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    host = os.getenv("API_HOST", "0.0.0.0")  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –≤—Å–µ—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞—Ö
    port = int(os.getenv("API_PORT", "5000"))  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ—Ä—Ç 5000
    
    app.run(debug=True, host=host, port=port)